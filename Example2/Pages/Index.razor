@page "/"

@inject IJSRuntime JsRuntime;

<h1>Example 2 - Moving sprites</h1>
<div id="canvasContainer">
    <BECanvas @ref="_canvasReference" Width="800" Height="600"></BECanvas>
</div>

<img  @ref="_mStackLogo" src="Images/mstack.png" hidden/>

@code {
    BECanvasComponent _canvasReference = null;
    Canvas2DContext _canvasContext = null;
    ElementReference _mStackLogo;

    int xPosition = 100;
    int yPosition = 100;
    int xSpeed = 5;
    int ySpeed = 5;

    /// <summary>
    /// Initialized the canvasses and creates the SnakeGame
    /// </summary>
    /// <param name="firstRender">Flag that identifies if this is the first render</param>
    /// <returns>A completed task</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        _canvasContext = await _canvasReference.CreateCanvas2DAsync();

        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
    }

    /// <summary>
    /// This method will be called 60 times per second by the requestanimationframe from javascript.
    /// </summary>
    /// <param name="timeStamp">The current timestamp</param>
    /// <param name="width">The width of the canvas</param>
    /// <param name="height">The height of the canvas</param>
    /// <returns>A completed task</returns>
    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int width, int height)
    {
        await _canvasContext.BeginBatchAsync();
        await _canvasContext.ClearRectAsync(0, 0, width, height);
        await _canvasContext.SetFillStyleAsync("lightblue");
        await _canvasContext.FillRectAsync(0, 0, width, height);

        await _canvasContext.DrawImageAsync(_mStackLogo, xPosition, yPosition);

        await _canvasContext.SetFillStyleAsync("black");
        await _canvasContext.SetFontAsync("20px Comic Sans MS");
        await _canvasContext.FillTextAsync($"TimeStamp: {timeStamp}", 10, 50);

        await _canvasContext.EndBatchAsync();

        // update positions
        xPosition += xSpeed;
        yPosition += ySpeed;

        if (xPosition > width || xPosition < 0)
            xSpeed *= -1;

        if (yPosition > height || yPosition < 0)
            ySpeed *= -1;
    }

}